{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js","recipe.module.css"],"names":["Recipe","title","calories","image","ingredients","className","style","recipe","map","ingredient","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","a","fetch","response","json","data","hits","console","log","getRecipes","onSubmit","e","preventDefault","type","value","onChange","target","label","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"mPAsBeA,EAlBA,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,MAAMC,EAAgC,EAAhCA,SAASC,EAAuB,EAAvBA,MAAMC,EAAiB,EAAjBA,YACtC,OACA,sBAAKC,UAAaC,IAAMC,OAAxB,UACI,+BAAKN,EAAL,OACA,6BACKG,EAAYI,KAAI,SAAAC,GAAU,OACvB,6BAEKA,EAAWC,YAIxB,8BAAIR,EAAJ,eACA,qBAAKG,UAAWC,IAAMH,MAAOQ,IAAOR,EAAOS,IAAM,SCmDtCC,G,MAhEH,WAGZ,IAMA,EAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAGA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAGA,EAA0BJ,mBAAS,WAAnC,mBAAOK,EAAP,KAAcC,EAAd,KA6BE,OAbFC,qBAAU,YAGQ,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCJ,EAApC,mBAhCjB,WAgCiB,oBA7BhB,qCA4BK,cACXK,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBV,EAAWU,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJA,2CAAH,qDAMlBG,KACE,CAACX,IAIC,sBAAKd,UAAY,MAAjB,UACE,uBAAM0B,SAtBM,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAmBqBb,UAAY,cAAvC,UACE,uBAAOA,UAAW,aAAa6B,KAAK,OAAOC,MAAOlB,EAAQmB,SA5B7C,SAAAJ,GACrBd,EAAUc,EAAEK,OAAOF,UA4BX,wBAAQ9B,UAAY,gBAAgB6B,KAAO,SAA3C,yBAEF,qBAAK7B,UAAU,UAAf,SACCU,EAAQP,KAAI,SAAAD,GAAM,OACnB,cAAC,EAAD,CAEAN,MAAOM,EAAOA,OAAO+B,MACrBpC,SAAYqC,KAAKC,MAAMjC,EAAOA,OAAOL,UACrCC,MAASI,EAAOA,OAAOJ,MACvBC,YAAeG,EAAOA,OAAOH,aAJtBG,EAAOA,OAAO+B,iBC7CZG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,yB","file":"static/js/main.c7e260e2.chunk.js","sourcesContent":["import React from \"react\";\nimport style from \"./recipe.module.css\"\n\n// Function to display the data fetched\nconst Recipe = ({title,calories,image,ingredients}) => {\nreturn(\n<div className = {style.recipe}>\n    <h1>{title} </h1>\n    <ol>\n        {ingredients.map(ingredient =>(\n            <li>\n                \n                {ingredient.text}\n            </li>\n        ))}\n    </ol>\n    <p>{calories} Calories</p>\n    <img className={style.image} src = {image} alt = \"\" />\n</div>\n);\n};\n\nexport default Recipe;","import React, {useEffect, useState} from \"react\";\nimport Recipe from \"./Recipe\";\nimport './App.css';\n\nconst App = () => {\n\n //Application ID \nconst APP_ID = \"98fd54a0\";\n\n//Application key\nconst APP_KEY = \"15df6f3a67115b6f96e3f4c9c1c6e090\";\n\n// Store the recipes array in the state.\nconst [recipes, setRecipes] = useState([]);\n\n//Store the searched string in the state\nconst [search, setSearch] = useState(\"\");\n\n//Store the final query in the state\nconst [query, setQuery] = useState(\"chicken\")\n\n\n// Function to update the search.\nconst updateSearch = e => {\nsetSearch(e.target.value);\n}\n\n//Function to get the final query\nconst getSearch = e => {\n  e.preventDefault();\n  setQuery(search);\n  setSearch(\"\");\n}\n\n// Hook that manages the side-effects\nuseEffect(() => {\n\n  // Fetching data from the API\n  const getRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits)\n    };\ngetRecipes();\n},[query]);\n\n  // Displaying data fetched.\n  return(\n    <div className = 'App'>\n      <form onSubmit={getSearch} className = \"search-form\">\n        <input className= \"search-bar\" type=\"text\" value={search} onChange={updateSearch}/>\n        <button className = \"search-button\" type = \"submit\"> search </button>\n      </form>\n      <div className=\"recipes\">\n      {recipes.map(recipe => (\n      <Recipe \n      key = {recipe.recipe.label} \n      title={recipe.recipe.label} \n      calories = {Math.round(recipe.recipe.calories)} \n      image = {recipe.recipe.image}\n      ingredients = {recipe.recipe.ingredients}/>\n    ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"image\":\"recipe_image__BtdIE\"};"],"sourceRoot":""}